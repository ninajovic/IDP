import numpy as np
import math
import matplotlib.pyplot as plt
a = ["0.000 9.041 18.610 20.171 19.240 9.214 9.972 21.420 6.247 10.970 6.247 16.544 19.943 8.616 19.012 23.297 13.991 13.060 7.178 15.676 14.165 0.010 9.041 18.609 20.170 19.238 9.217 9.972 21.420 6.250 10.970 6.251 16.544 19.943 8.618 19.011 23.294 13.991 13.061 7.180 15.677 14.165 0.020 9.043 18.609 20.168 19.235 9.225 9.972 21.417 6.260 10.970 6.261 16.544 19.941 8.622 19.008 23.285 13.992 13.063 7.187 15.681 14.164 0.030 9.047 18.607 20.164 19.228 9.239 9.973 21.413 6.277 10.970 6.278 16.544 19.937 8.630 19.002 23.271 13.993 13.066 7.197 15.687 14.162 0.040 9.051 18.605 20.159 19.220 9.257 9.974 21.407 6.299 10.970 6.302 16.544 19.933 8.640 18.994 23.251 13.994 13.071 7.212 15.696 14.159 0.050 9.057 18.603 20.153 19.208 9.281 9.976 21.400 6.329 10.970 6.333 16.544 19.927 8.654 18.984 23.225 13.995 13.078 7.231 15.707 14.156 0.060 9.064 18.600 20.145 19.195 9.310 9.978 21.391 6.364 10.970 6.370 16.544 19.919 8.670 18.971 23.193 13.997 13.085 7.254 15.720 14.153 0.070 9.073 18.596 20.135 19.179 9.344 9.980 21.380 6.405 10.969 6.414 16.544 19.911 8.689 18.956 23.156 13.999 13.095 7.281 15.736 14.148 0.080 9.083 18.592 20.125 19.160 9.383 9.982 21.367 6.453 10.969 6.464 16.544 19.901 8.712 18.939 23.114 14.001 13.105 7.312 15.754 14.143 0.090 9.094 18.587 20.112 19.139 9.426 9.985 21.353 6.506 10.969 6.519 16.543 19.890 8.737 18.919 23.065 14.003 13.117 7.347 15.774 14.137 0.100 9.106 18.582 20.099 19.115 9.474 9.988 21.337 6.564 10.969 6.580 16.543 19.877 8.764 18.898 23.012 14.006 13.130 7.386 15.796 14.131 0.110 9.120 18.576 20.083 19.089 9.526 9.991 21.320 6.628 10.968 6.647 16.543 19.863 8.795 18.874 22.953 14.009 13.144 7.428 15.820 14.124 0.120 9.135 18.570 20.067 19.061 9.582 9.995 21.301 6.696 10.968 6.719 16.542 19.848 8.828 18.848 22.889 14.013 13.160 7.474 15.845 14.117 0.130 9.151 18.563 20.049 19.030 9.642 9.999 21.280 6.770 10.968 6.795 16.541 19.831 8.864 18.819 22.819 14.016 13.177 7.524 15.873 14.109 0.140 9.168 18.555 20.029 18.997 9.706 10.003 21.258 6.847 10.967 6.876 16.540 19.813 8.902 18.789 22.745 14.020 13.195 7.576 15.901 14.100 0.150 9.186 18.547 20.008 18.962 9.772 10.007 21.234 6.929 10.967 6.961 16.539 19.794 8.943 18.756 22.666 14.024 13.214 7.632 15.931 14.091 0.160 9.206 18.538 19.986 18.924 9.842 10.012 21.208 7.015 10.966 7.050 16.537 19.773 8.986 18.721 22.582 14.028 13.234 7.691 15.962 14.081 0.170 9.226 18.528 19.962 18.884 9.915 10.017 21.181 7.104 10.966 7.142 16.535 19.751 9.031 18.685 22.493 14.032 13.255 7.752 15.993 14.071 0.180 9.248 18.518 19.937 18.842 9.990 10.022 21.152 7.197 10.965 7.238 16.533 19.727 9.079 18.646 22.400 14.037 13.277 7.817 16.026 14.061 0.190 9.271 18.508 19.910 18.798 10.067 10.028 21.121 7.292 10.965 7.337 16.530 19.703 9.128 18.604 22.303 14.041 13.300 7.884 16.059 14.050 0.200 9.294 18.496 19.882 18.751 10.147 10.034 21.089 7.391 10.965 7.438 16.527 19.677 9.180 18.561 22.201 14.046 13.324 7.953 16.092 14.039 0.210 9.319 18.484 19.853 18.703 10.228 10.040 21.055 7.492 10.964 7.541 16.523 19.649 9.233 18.516 22.096 14.051 13.349 8.025 16.126 14.028 0.220 9.344 18.471 19.822 18.652 10.310 10.046 21.019 7.595 10.964 7.647 16.519 19.620 9.289 18.469 21.986 14.056 13.375 8.098 16.160 14.016 0.230 9.371 18.458 19.790 18.599 10.394 10.052 20.982 7.700 10.964 7.754 16.515 19.590 9.346 18.420 21.873 14.061 13.401 8.174 16.193 14.004 0.240 9.398 18.443 19.756 18.544 10.479 10.059 20.943 7.807 10.963 7.863 16.509 19.559 9.405 18.369 21.757 14.066 13.428 8.251 16.226 13.992 0.250 9.426 18.429 19.721 18.487 10.564 10.066 20.902 7.916 10.963 7.973 16.504 19.526 9.465 18.316 21.638 14.071 13.456 8.331 16.259 13.979 0.260 9.455 18.413 19.684 18.429 10.650 10.073 20.860 8.025 10.963 8.085 16.497 19.492 9.527 18.262 21.515 14.076 13.484 8.411 16.291 13.967 0.270 9.485 18.396 19.646 18.368 10.737 10.080 20.816 8.136 10.963 8.196 16.490 19.456 9.591 18.205 21.390 14.081 13.513 8.493 16.322 13.955 0.280 9.515 18.379 19.607 18.306 10.823 10.088 20.771 8.248 10.964 8.309 16.482 19.419 9.655 18.147 21.262 14.086 13.542 8.576 16.352 13.942 0.290 9.546 18.361 19.566 18.242 10.909 10.096 20.724 8.360 10.964 8.421 16.473 19.381 9.721 18.087 21.132 14.090 13.571 8.661 16.382 13.930 0.300 9.577 18.343 19.524 18.176 10.995 10.103 20.675 8.473 10.965 8.534 16.464 19.342 9.788 18.026 21.001 14.095 13.601 8.746 16.409 13.917 0.310 9.609 18.323 19.480 18.108 11.080 10.111 20.625 8.586 10.966 8.647 16.454 19.301 9.855 17.963 20.867 14.100 13.631 8.832 16.436 13.905 0.320 9.642 18.303 19.435 18.039 11.164 10.119 20.574 8.699 10.967 8.759 16.442 19.258 9.924 17.898 20.732 14.104 13.661 8.918 16.460 13.893 0.330 9.675 18.282 19.389 17.969 11.248 10.127 20.520 8.812 10.968 8.871 16.430 19.215 9.993 17.832 20.596 14.108 13.691 9.005 16.484 13.882 0.340 9.709 18.260 19.342 17.897 11.330 10.136 20.466 8.924 10.970 8.982 16.417 19.170 10.064 17.764 20.458 14.112 13.721 9.093 16.505 13.870 0.350 9.743 18.237 19.293 17.824 11.411 10.144 20.410 9.036 10.972 9.092 16.404 19.124 10.134 17.695 20.321 14.116 13.751 9.181 16.524 13.859 0.360 9.777 18.214 19.242 17.749 11.490 10.153 20.352 9.148 10.975 9.201 16.389 19.076 10.205 17.625 20.183 14.120 13.781 9.269 16.542 13.849 0.370 9.812 18.190 19.191 17.674 11.568 10.161 20.293 9.259 10.978 9.309 16.373 19.027 10.277 17.554 20.045 14.123 13.811 9.357 16.557 13.839 0.380 9.847 18.164 19.138 17.597 11.644 10.170 20.233 9.368 10.981 9.416 16.357 18.977 10.349 17.481 19.907 14.126 13.841 9.444 16.570 13.830 0.390 9.882 18.138 19.084 17.519 11.718 10.178 20.171 9.477 10.985 9.521 16.339 18.926 10.421 17.408 19.770 14.128 13.870 9.532 16.581 13.821 0.400 9.917 18.111 19.028 17.440 11.790 10.187 20.108 9.585 10.990 9.624 16.320 18.873 10.493 17.333 19.633 14.131 13.899 9.619 16.590 13.812 0.410 9.953 18.083 18.972 17.361 11.860 10.196 20.044 9.691 10.995 9.726 16.301 18.819 10.566 17.258 19.498 14.132 13.928 9.706 16.596 13.805 0.420 9.988 18.055 18.914 17.280 11.928 10.205 19.978 9.796 11.001 9.826 16.280 18.764 10.638 17.181 19.364 14.134 13.956 9.792 16.600 13.798 0.430 10.024 18.025 18.855 17.199 11.994 10.213 19.912 9.899 11.008 9.924 16.259 18.707 10.710 17.104 19.233 14.134 13.984 9.878 16.602 13.792 0.440 10.060 17.995 18.794 17.117 12.058 10.222 19.844 10.001 11.015 10.020 16.236 18.650 10.782 17.026 19.103 14.135 14.011 9.963 16.601 13.787 0.450 10.095 17.963 18.733 17.035 12.119 10.231 19.775 10.101 11.023 10.114 16.213 18.591 10.854 16.948 18.976 14.135 14.037 10.047 16.598 13.783 0.460 10.131 17.931 18.670 16.953 12.177 10.239 19.705 10.199 11.032 10.205 16.189 18.531 10.925 16.869 18.851 14.134 14.063 10.130 16.592 13.780 0.470 10.167 17.898 18.606 16.870 12.233 10.248 19.634 10.295 11.042 10.295 16.164 18.469 10.996 16.790 18.729 14.133 14.087 10.212 16.585 13.778 0.480 10.202 17.864 18.542 16.787 12.287 10.257 19.562 10.389 11.053 10.381 16.138 18.407 11.066 16.710 18.611 14.131 14.111 10.293 16.575 13.777 0.490 10.237 17.829 18.476 16.704 12.338 10.265 19.489 10.481 11.064 10.466 16.111 18.343 11.136 16.630 18.496 14.129 14.135 10.373 16.563 13.777 0.500 10.272 17.793 18.409 16.621 12.387 10.274 19.415 10.571 11.077 10.548 16.084 18.279 11.205 16.550 18.385 14.126 14.157 10.452 16.548 13.778"]
b = ["q ALA CYS ASP GLU PHE GLY HIS ILE LYS LEU MET ASN PRO GLN ARG SER THR VAL TRP TYR"]

c = ["MET GLU SER ASN GLN SER ASN ASN GLY GLY SER GLY ASN ALA ALA LEU ASN ARG GLY GLY ARG TYR VAL PRO PRO HIS LEU ARG GLY GLY ASP GLY GLY ALA ALA ALA ALA ALA SER ALA GLY GLY ASP ASP ARG ARG GLY GLY ALA GLY GLY GLY GLY TYR ARG ARG GLY GLY GLY ASN SER GLY GLY GLY GLY GLY GLY GLY TYR ASP ARG GLY TYR ASN ASP ASN ARG ASP ASP ARG ASP ASN ARG GLY GLY SER GLY GLY TYR GLY ARG ASP ARG ASN TYR GLU ASP ARG GLY TYR ASN GLY GLY GLY GLY GLY GLY GLY ASN ARG GLY TYR ASN ASN ASN ARG GLY GLY GLY GLY GLY GLY TYR ASN ARG GLN ASP ARG GLY ASP GLY GLY SER SER ASN PHE SER ARG GLY GLY TYR ASN ASN ARG ASP GLU GLY SER ASP ASN ARG GLY SER GLY ARG SER TYR ASN ASN ASP ARG ARG ASP ASN GLY GLY ASP GLY"]
#a and b lists are the tables from a experimental paper and contain values needed for the calculations
#c list is the LAF-1 protein
r = []
data1 = np.loadtxt('csd.dat')
for q in range(0,len(data1)):
    r.append(data1[q][1])   #extracting the rij values from the csd.dat file
    
o = b[0]
k = a[0]
d = c[0]
f=k.split()
amino = o.split()
seq = d.split()
q = np.arange(0.000,0.510,0.01)
rg = 17.7 #(originally 1.77nm, but value is converted to angstrom to match the units of q)

x = np.zeros(shape=(51,21)) #q, BB and f values will be put into this array
initial = 0
final = 21
xindex = 0

for k in range(0,51):
    for i in range(initial,final):
        #print f[i]
        x[k][xindex] = f[i]
        xindex = xindex+1
    initial = initial+21
    final = final+21
    xindex = 0
    
m = np.zeros(shape = (len(seq)-1, 2)) #in this array I will place in indecis of amino array. this will match indecis of the m array and the x array

for t in range(0,len(seq)-1):
    first = seq[t]
    second = seq[t+1]
    for i in range(0, len(amino)):
        if first == amino[i]:
            m[t][0] = i
        if second == amino[i]:
            m[t][1] = i
            
I = []
for e in range(0,len(q)):
    temp = 0
    for l in range(0,len(m)):
        temp1 = int(m[l][0])
        temp2 = int(m[l][1])
        temp = temp + (x[e][temp1]*x[e][temp2])*(np.sin(math.radians(q[e]*r[l]*10)))/(q[e]*r[l]*10)
        #print x[e][temp1]
        #print (np.sin(math.radians(q[e]*r[l]*10))), q[e], r[l]
        #print temp
    I.append(temp)
#I[0] = 0

#calculation I0
I0 = 0
for g in range(0,len(m)):
    tem1 = int(m[g][0])
    tem2 = int(m[g][1])
    I0 = I0+(x[0][tem1]*x[0][tem2])
I[0] = I0

y = []

for u in range(0,len(I)):
    yvalue = ((q[u]*rg)**2)*(I[u]/I0)
    y.append(yvalue)

xval = []
for w in range(0,len(q)):
    xvalue = rg*q[w]
    xval.append(xvalue)
    

plt.plot(xval,y)
plt.xlabel('qRg')
plt.ylabel('(qRg)^2(I(q)/I(0)))')
plt.show()
